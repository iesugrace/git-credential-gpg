#!/bin/bash
# Author: Joshua Chen
# Date: 2015-11-14
# Location: Shenzhen
# Desc: a git authentication program uses gpg to secure credentials.

# read info from stdin, return true if both protocal and host
# are provided, otherwise false. We shall at least have a
# protocol and a host variable when success, and a username
# and password on store mode. Stop reading on an empty line.
# The input lines are expected to be an assignment form like:
# protocol=https
# host=github.com
# username=joshua
# password=abc123
read_stdin() {
    while read line
    do
        test -z "$line" && break
        eval "$line"
    done
    if [ -n "$protocol" -a -n "$host" ]; then
        return 0
    else
        return 1
    fi
}

# encrypt the data from stdin with gpg, write it to stdout
enc() {
    keyid=$(awk -F= '$1 == "keyid" {print $2}' $configfile | tail -n1)
    if [ -z "$keyid" ]; then
        echo "no gpg key configured" >&2
        exit 1
    fi
    cat | gpg -er $keyid
}

# decrypt the data from stdin with gpg, write it to stdout
dec() {
    cat | gpg -d
}

# make a file name from the protocol and host, file name is the sha1sum
# of this string: protocol://host
name() {
    local protocol host
    protocol=$1
    host=$2
    basename=$(echo -n "${protocol}://${host}" | sha1sum | awk '{print $1}')
    echo "$datadir/$basename"
}

# config the environment such as the gpg key id
config() {
    read -p "gpg key for encryption: " keyid
    if [ -z "$keyid" ]; then
        echo "nothing input, nothing done" >&2
        exit 1
    fi
    sed -i '/^keyid=/d' $configfile
    echo "keyid=$keyid" >> $configfile
}

# decrypt and send info to the client
get() {
    file=$(name $protocol $host)
    if [ -f "$file" ]; then
        cat $file | dec
    fi
}

# encrypt and store info to file
store() {
    local info file
    if [ -z "$username" -o -z "$password" ]; then
        exit 1
    fi
    info+="username=$username"$'\n'
    info+="password=$password"$'\n'
    file=$(name $protocol $host)
    echo -n "$info" | enc > $file
}

# remove the associated file
erase() {
    local file=$(name $protocol $host)
    rm -f $file
}

datadir="$HOME/.git-credential-gpg"
configfile="$datadir/config"

mkdir -p "$datadir"
touch "$configfile"

if [ "$1" = "config" ]; then
    config
    exit
fi

if ! read_stdin; then
    exit
fi

if [ "$1" = "get" ]; then
    get
elif [ "$1" = "store" ]; then
    store
elif [ "$1" = "erase" ]; then
    erase
fi
