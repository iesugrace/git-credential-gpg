#!/bin/bash
# Author: Joshua Chen
# Date: 2015-11-14
# Location: Shenzhen
# Desc: a git authentication program uses gpg to secure credentials.

# read protocol and host from stdin, return true if both
# are provided, otherwise false. We shall at least have a
# protocol and a host variable when success, and a username
# and password on store mode.
read_stdin() {
    :
}

# encrypt the data from stdin with gpg, write it to stdout
enc() {
    :
}

# decrypt the data from stdin with gpg, write it to stdout
dec() {
    :
}

# make a file name from the protocol and host, file name is the sha1sum
# of this string: protocol://host
name() {
    :
}

# config the environment such as the gpg key id
config() {
    :
}

# decrypt and send info for the client
get() {
    :
}

# encrypt and store info to file
store() {
    :
}

# remove the associated file
erase() {
    :
}

datadir="$HOME/.git-credential-gpg"
configfile="$datadir/config"

mkdir -p "$datadir"
touch "$configfile"

if ! read_stdin; then
    exit
fi

if [ "$1" = "get" ]; then
    get
elif [ "$1" = "store" ]; then
    store
elif [ "$1" = "erase" ]; then
    erase
elif [ "$1" = "config" ]; then
    config
fi
